/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type NewsOverviewCategory = {
	_id: string;
	_type: 'newsOverviewCategory';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
	};
};

export type NewsArticlePage = {
	_id: string;
	_type: 'news-article-page';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	subtitle: string;
	intro?: string;
};

export type Spacer = {
	_type: 'spacer';
	variant?: 'default';
};

export type Grid = {
	_type: 'grid';
	title?: string;
	columns: Columns;
	items?: Array<
		| {
				asset?: {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
				};
				media?: unknown;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string;
				description?: string;
				_type: 'mainImage';
				_key: string;
		  }
		| ({
				_key: string;
		  } & BlockContent)
	>;
};

export type Blockquote = {
	_type: 'blockquote';
	quote?: string;
	author?: string;
};

export type TrainingTime = {
	_type: 'trainingTime';
	season: 'yearly' | 'summer' | 'winter';
	weekday: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
	startTime: string;
	endTime: string;
	location: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'venue';
	};
	note?: string;
};

export type Stats = {
	_type: 'stats';
	title: string;
	value: string;
	suffix?: string;
};

export type Link = {
	_type: 'link';
	href?: string;
};

export type SingleGroupPage = {
	_id: string;
	_type: 'singleGroupPage';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
};

export type Privacy = {
	_id: string;
	_type: 'privacy';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	introText: SimpleBlockContent;
	address: string;
	phone?: string;
	email: string;
	content: BlockContent;
};

export type BlockContent = {
	_type: 'blockContent';
	text?: Array<
		| {
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: 'span';
					_key: string;
				}>;
				style?: 'normal' | 'h2' | 'h3' | 'blockquote';
				listItem?: 'bullet' | 'number';
				markDefs?: Array<
					{
						_key: string;
					} & Link
				>;
				level?: number;
				_type: 'block';
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
				};
				media?: unknown;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string;
				description?: string;
				_type: 'customImage';
				_key: string;
		  }
	>;
};

export type NewsOverview = {
	_id: string;
	_type: 'newsOverview';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
	};
};

export type Membership = {
	_id: string;
	_type: 'membership';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	documents: Array<
		{
			_key: string;
		} & DocumentDownload
	>;
	contactPersons: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'person';
	}>;
};

export type Imprint = {
	_id: string;
	_type: 'imprint';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	address: string;
	registerCourt: string;
	registerNo: string;
	represented: string;
	email: string;
	contactForm: InternalLink;
	responsible: string;
	technicalQuestionsName: string;
	technicalQuestionsEmail: string;
	socialMedia: string;
	support: SimpleBlockContent;
	credits: string;
};

export type InternalLink = {
	_type: 'internalLink';
	title?: string;
	link?:
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'news.article';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'home';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'aboutUs';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'contact';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'groupsPage';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'imprint';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'membership';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'newsOverview';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'privacy';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'singleGroupPage';
		  };
};

export type GroupsPage = {
	_id: string;
	_type: 'groupsPage';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content?: {
		groupsSection?: {
			title: string;
			subtitle: string;
			intro?: string;
		};
		statsSection: {
			stats: Array<
				{
					_key: string;
				} & Stats
			>;
		};
		venuesSection?: {
			title: string;
			subtitle: string;
			intro?: string;
			venues?: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'venue';
			}>;
		};
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
	};
};

export type Contact = {
	_id: string;
	_type: 'contact';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		receiver: Array<
			{
				_key: string;
			} & ContactNameMail
		>;
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
	};
};

export type AboutUs = {
	_id: string;
	_type: 'aboutUs';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		gallerySection?: {
			title: string;
			subtitle: string;
			intro?: string;
			images: Array<{
				asset?: {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
				};
				media?: unknown;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string;
				description?: string;
				_type: 'extendedImage';
				_key: string;
			}>;
		};
		chronicleSection?: {
			title: string;
			subtitle: string;
			intro?: string;
			chronicle?: Array<
				{
					_key: string;
				} & ImageCard
			>;
		};
		visionSection: {
			title: string;
			subtitle: string;
			intro?: string;
			cta: string;
		};
		statsSection: {
			stats: Array<
				{
					_key: string;
				} & Stats
			>;
		};
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
	};
};

export type Home = {
	_id: string;
	_type: 'home';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		featureSection: {
			title: string;
			subtitle: string;
			intro?: string;
			features?: Array<{
				title: string;
				intro: string;
				icon: string;
				_type: 'feature';
				_key: string;
			}>;
		};
		visionSection: {
			title: string;
			subtitle: string;
			intro?: string;
			cta: string;
		};
		groupsSection: {
			title: string;
			subtitle: string;
		};
		statsSection: {
			stats: Array<
				{
					_key: string;
				} & Stats
			>;
		};
		pricingSection: {
			title: string;
			subtitle: string;
			intro?: string;
			pricingYouth: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
			pricingFamily: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
			pricingAdult: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
		};
		testimonialSection: {
			title: string;
			subtitle: string;
			testimonials?: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'testimonial';
			}>;
		};
		contactPersonsSection: {
			title: string;
			subtitle: string;
			intro?: string;
			contactPersons: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'person';
			}>;
		};
		newsSection: {
			title: string;
			subtitle: string;
			intro?: string;
		};
	};
};

export type ImageCard = {
	_type: 'imageCard';
	title?: string;
	description?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
};

export type ExternalLink = {
	_type: 'externalLink';
	title: string;
	url: string;
};

export type DocumentDownload = {
	_type: 'documentDownload';
	title: string;
	document: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
		};
		media?: unknown;
		_type: 'file';
	};
};

export type ContactNameMail = {
	_type: 'contactNameMail';
	name: string;
	email: string;
};

export type Columns = {
	_type: 'columns';
	small?: '1' | '2' | '3' | '4';
	medium?: '1' | '2' | '3' | '4';
	large?: '1' | '2' | '3' | '4';
};

export type SiteSettings = {
	_id: string;
	_type: 'site-settings';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	meta?: MetaFields;
	metadataBase?: string;
	contact?: {
		address: string;
		phone: string;
		email: string;
	};
	newsletter?: {
		title: string;
		cta: string;
	};
	mainNavigation?: Array<
		| ({
				_key: string;
		  } & InternalLink)
		| ({
				_key: string;
		  } & ExternalLink)
	>;
	legalNavigation?: Array<
		{
			_key: string;
		} & InternalLink
	>;
	socialFields?: SocialFields;
};

export type SocialFields = {
	_type: 'socialFields';
	whatsapp?: string;
	facebook?: string;
	instagram?: string;
	youtube?: string;
};

export type Venue = {
	_id: string;
	_type: 'venue';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	description: SimpleBlockContent;
	type: 'hall-1' | 'hall-2' | 'hall-3' | 'cinder' | 'hybrid' | 'artificial-turf' | 'grass';
	mainImage?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'image';
	};
	location?: {
		name: string;
		street: string;
		houseNumber: string;
		zipCode?: string;
		city: string;
	};
};

export type Testimonial = {
	_id: string;
	_type: 'testimonial';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	firstName: string;
	lastName: string;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	role: string;
	quote: string;
	show?: boolean;
};

export type HonoraryMember = {
	_id: string;
	_type: 'honoraryMember';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	firstName: string;
	lastName: string;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	memberSince: string;
};

export type Person = {
	_id: string;
	_type: 'person';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	firstName: string;
	lastName: string;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	phone?: string;
	affiliations?: Array<{
		department:
			| 'admin'
			| 'children-gymnastics'
			| 'courses'
			| 'dance'
			| 'other-sports'
			| 'soccer'
			| 'taekwondo';
		team:
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.admin';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.children-gymnastics';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.courses';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.dance';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.other-sports';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.soccer';
			  }
			| {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'group.taekwondo';
			  };
		role: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'role';
		};
		taskDescription: string;
		description: string;
		_type: 'affiliation';
		_key: string;
	}>;
};

export type Role = {
	_id: string;
	_type: 'role';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	email?: string;
};

export type GroupTaekwondo = {
	_id: string;
	_type: 'group.taekwondo';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupSoccer = {
	_id: string;
	_type: 'group.soccer';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupOtherSports = {
	_id: string;
	_type: 'group.other-sports';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupDance = {
	_id: string;
	_type: 'group.dance';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupCourses = {
	_id: string;
	_type: 'group.courses';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupChildrenGymnastics = {
	_id: string;
	_type: 'group.children-gymnastics';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type GroupAdmin = {
	_id: string;
	_type: 'group.admin';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
	description: SimpleBlockContent;
	icon:
		| 'Badminton'
		| 'Bodenturnen'
		| 'Cheerleading'
		| 'Fitness'
		| 'Fussball'
		| 'Gymnastik'
		| 'Jujutsu'
		| 'Pilates'
		| 'RopeSkipping'
		| 'SportInGebaeuden'
		| 'Sportakrobatik'
		| 'StepAerobic'
		| 'Taekwondo'
		| 'Tanzen'
		| 'Turnen'
		| 'Wandern'
		| 'Yoga';
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	images?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
		_key: string;
	}>;
	trainingTimes?: Array<
		{
			_key: string;
		} & TrainingTime
	>;
	isSportGroup?: boolean;
};

export type SimpleBlockContent = {
	_type: 'simpleBlockContent';
	text?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: 'span';
			_key: string;
		}>;
		style?: 'normal';
		listItem?: 'bullet' | 'number';
		markDefs?: Array<{
			href?: string;
			_type: 'link';
			_key: string;
		}>;
		level?: number;
		_type: 'block';
		_key: string;
	}>;
};

export type NewsCategory = {
	_id: string;
	_type: 'news.category';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title: string;
	slug: Slug;
};

export type NewsArticle = {
	_id: string;
	_type: 'news.article';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	publishedAt: string;
	title: string;
	slug: Slug;
	categories: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'news.category';
	}>;
	author: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'author';
	};
	meta?: MetaFields;
	featuredImage: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'mainImage';
	};
	excerpt: string;
	body?: Array<
		| ({
				_key: string;
		  } & BlockContent)
		| ({
				_key: string;
		  } & Blockquote)
		| ({
				_key: string;
		  } & Grid)
		| {
				asset?: {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
				};
				media?: unknown;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string;
				description?: string;
				_type: 'mainImage';
				_key: string;
		  }
		| ({
				_key: string;
		  } & Spacer)
	>;
};

export type MainImage = {
	_type: 'mainImage';
	asset?: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
	};
	media?: unknown;
	hotspot?: SanityImageHotspot;
	crop?: SanityImageCrop;
	alt: string;
	description?: string;
};

export type MetaFields = {
	_type: 'metaFields';
	metaTitle?: string;
	metaDescription?: string;
	openGraphImage?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: 'image';
	};
};

export type Author = {
	_id: string;
	_type: 'author';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	firstName: string;
	lastName: string;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	email: string;
	jobTitle: string;
};

export type ExtendedImage = {
	_type: 'extendedImage';
	asset?: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
	};
	media?: unknown;
	hotspot?: SanityImageHotspot;
	crop?: SanityImageCrop;
	alt: string;
	description?: string;
};

export type SanityAssistInstructionTask = {
	_type: 'sanity.assist.instructionTask';
	path?: string;
	instructionKey?: string;
	started?: string;
	updated?: string;
	info?: string;
};

export type SanityAssistTaskStatus = {
	_type: 'sanity.assist.task.status';
	tasks?: Array<
		{
			_key: string;
		} & SanityAssistInstructionTask
	>;
};

export type SanityAssistSchemaTypeAnnotations = {
	_type: 'sanity.assist.schemaType.annotations';
	title?: string;
	fields?: Array<
		{
			_key: string;
		} & SanityAssistSchemaTypeField
	>;
};

export type SanityAssistOutputType = {
	_type: 'sanity.assist.output.type';
	type?: string;
};

export type SanityAssistOutputField = {
	_type: 'sanity.assist.output.field';
	path?: string;
};

export type SanityAssistInstructionContext = {
	_type: 'sanity.assist.instruction.context';
	reference: {
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: 'assist.instruction.context';
	};
};

export type AssistInstructionContext = {
	_id: string;
	_type: 'assist.instruction.context';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	context?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: 'span';
			_key: string;
		}>;
		style?: 'normal';
		listItem?: never;
		markDefs?: null;
		level?: number;
		_type: 'block';
		_key: string;
	}>;
};

export type SanityAssistInstructionUserInput = {
	_type: 'sanity.assist.instruction.userInput';
	message: string;
	description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
	children?: Array<
		| {
				marks?: Array<string>;
				text?: string;
				_type: 'span';
				_key: string;
		  }
		| ({
				_key: string;
		  } & SanityAssistInstructionFieldRef)
		| ({
				_key: string;
		  } & SanityAssistInstructionContext)
		| ({
				_key: string;
		  } & SanityAssistInstructionUserInput)
	>;
	style?: 'normal';
	listItem?: never;
	markDefs?: null;
	level?: number;
	_type: 'block';
	_key: string;
}>;

export type SanityAssistInstructionFieldRef = {
	_type: 'sanity.assist.instruction.fieldRef';
	path?: string;
};

export type SanityAssistInstruction = {
	_type: 'sanity.assist.instruction';
	prompt?: SanityAssistInstructionPrompt;
	icon?: string;
	title?: string;
	userId?: string;
	createdById?: string;
	output?: Array<
		| ({
				_key: string;
		  } & SanityAssistOutputField)
		| ({
				_key: string;
		  } & SanityAssistOutputType)
	>;
};

export type SanityAssistSchemaTypeField = {
	_type: 'sanity.assist.schemaType.field';
	path?: string;
	instructions?: Array<
		{
			_key: string;
		} & SanityAssistInstruction
	>;
};

export type MediaTag = {
	_id: string;
	_type: 'media.tag';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: Slug;
};

export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch';
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: 'sanity.imagePalette';
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions';
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot';
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageCrop = {
	_type: 'sanity.imageCrop';
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: 'sanity.fileAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
	_id: string;
	_type: 'sanity.imageAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata';
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Geopoint = {
	_type: 'geopoint';
	lat?: number;
	lng?: number;
	alt?: number;
};

export type Slug = {
	_type: 'slug';
	current: string;
	source?: string;
};

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData';
	name?: string;
	id?: string;
	url?: string;
};

export type AllSanitySchemaTypes =
	| NewsOverviewCategory
	| NewsArticlePage
	| Spacer
	| Grid
	| Blockquote
	| TrainingTime
	| Stats
	| Link
	| SingleGroupPage
	| Privacy
	| BlockContent
	| NewsOverview
	| Membership
	| Imprint
	| InternalLink
	| GroupsPage
	| Contact
	| AboutUs
	| Home
	| ImageCard
	| ExternalLink
	| DocumentDownload
	| ContactNameMail
	| Columns
	| SiteSettings
	| SocialFields
	| Venue
	| Testimonial
	| HonoraryMember
	| Person
	| Role
	| GroupTaekwondo
	| GroupSoccer
	| GroupOtherSports
	| GroupDance
	| GroupCourses
	| GroupChildrenGymnastics
	| GroupAdmin
	| SimpleBlockContent
	| NewsCategory
	| NewsArticle
	| MainImage
	| MetaFields
	| Author
	| ExtendedImage
	| SanityAssistInstructionTask
	| SanityAssistTaskStatus
	| SanityAssistSchemaTypeAnnotations
	| SanityAssistOutputType
	| SanityAssistOutputField
	| SanityAssistInstructionContext
	| AssistInstructionContext
	| SanityAssistInstructionUserInput
	| SanityAssistInstructionPrompt
	| SanityAssistInstructionFieldRef
	| SanityAssistInstruction
	| SanityAssistSchemaTypeField
	| MediaTag
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity/queries/pages/contact.ts
// Variable: contactPageQuery
// Query: *[_type == 'contact'][0] {		...,		content {			...,			contactPersonsSection {				intro,				subtitle,				title,			}		}	}
export type ContactPageQueryResult = {
	_id: string;
	_type: 'contact';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		receiver: Array<
			{
				_key: string;
			} & ContactNameMail
		>;
		contactPersonsSection: {
			intro: string | null;
			subtitle: string;
			title: string;
		};
	};
} | null;
// Variable: contactPageContactPersonsQuery
// Query: *[_type == 'contact'][0].content.contactPersonsSection.contactPersons[]-> {			firstName,	lastName,	phone,	image,	"email": affiliations[department->title == $department][0].role->email,	"role": affiliations[department->title == $department][0].role->title,	"vision": affiliations[department->title == $department][0].taskDescription,	}
export type ContactPageContactPersonsQueryResult = Array<{
	firstName: string;
	lastName: string;
	phone: string | null;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	email: string | null;
	role: string | null;
	vision: string | null;
}> | null;

// Source: ./src/lib/sanity/queries/pages/home.ts
// Variable: homePageQuery
// Query: *[_type == 'home'][0] {		...,		content {			...,			contactPersonsSection {				intro,				subtitle,				title,			}		}	}
export type HomePageQueryResult = {
	_id: string;
	_type: 'home';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		featureSection: {
			title: string;
			subtitle: string;
			intro?: string;
			features?: Array<{
				title: string;
				intro: string;
				icon: string;
				_type: 'feature';
				_key: string;
			}>;
		};
		visionSection: {
			title: string;
			subtitle: string;
			intro?: string;
			cta: string;
		};
		groupsSection: {
			title: string;
			subtitle: string;
		};
		statsSection: {
			stats: Array<
				{
					_key: string;
				} & Stats
			>;
		};
		pricingSection: {
			title: string;
			subtitle: string;
			intro?: string;
			pricingYouth: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
			pricingFamily: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
			pricingAdult: {
				title: string;
				subtitle: string;
				intro?: string;
				price: number;
				benefitsTitle: string;
				benefits: Array<string>;
				cta: string;
			};
		};
		testimonialSection: {
			title: string;
			subtitle: string;
			testimonials?: Array<{
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				_key: string;
				[internalGroqTypeReferenceTo]?: 'testimonial';
			}>;
		};
		contactPersonsSection: {
			intro: string | null;
			subtitle: string;
			title: string;
		};
		newsSection: {
			title: string;
			subtitle: string;
			intro?: string;
		};
	};
} | null;
// Variable: homePageGroupsQuery
// Query: *[_type == 'group'][] {		title,		icon,	}
export type HomePageGroupsQueryResult = Array<never>;
// Variable: homePageTestimonialsQuery
// Query: *[_type == 'home'][0].content.testimonialSection.testimonials[0..2]-> {		firstName,		lastName,		image,		quote,		role,		show,	}
export type HomePageTestimonialsQueryResult = Array<{
	firstName: string;
	lastName: string;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	quote: string;
	role: string;
	show: boolean | null;
}> | null;
// Variable: homePageContactPersonsQuery
// Query: *[_type == 'home'][0].content.contactPersonsSection.contactPersons[]-> {			firstName,	lastName,	phone,	image,	"email": affiliations[department->title == $department][0].role->email,	"role": affiliations[department->title == $department][0].role->title,	"vision": affiliations[department->title == $department][0].taskDescription,	}
export type HomePageContactPersonsQueryResult = Array<{
	firstName: string;
	lastName: string;
	phone: string | null;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	email: string | null;
	role: string | null;
	vision: string | null;
}> | null;

// Source: ./src/lib/sanity/queries/pages/news-article.ts
// Variable: newsArticleHeroQuery
// Query: *[_type == 'news-article-page'][0] {		title,		subtitle,	}
export type NewsArticleHeroQueryResult = {
	title: string;
	subtitle: string;
} | null;
// Variable: newsArticleContentQuery
// Query: *[_type == 'news.article' && slug.current == $slug][0] {		author -> {			email,			firstName,			image,			lastName,			jobTitle,		},		body[],		categories[] -> {			"slug": slug.current,			title		},		featuredImage,		publishedAt,		"slug": slug.current,		title,	}
export type NewsArticleContentQueryResult = {
	author: {
		email: string;
		firstName: string;
		image: {
			asset?: {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string;
			description?: string;
			_type: 'extendedImage';
		};
		lastName: string;
		jobTitle: string;
	};
	body: Array<
		| ({
				_key: string;
		  } & BlockContent)
		| ({
				_key: string;
		  } & Blockquote)
		| ({
				_key: string;
		  } & Grid)
		| ({
				_key: string;
		  } & Spacer)
		| {
				asset?: {
					_ref: string;
					_type: 'reference';
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
				};
				media?: unknown;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string;
				description?: string;
				_type: 'mainImage';
				_key: string;
		  }
	> | null;
	categories: Array<{
		slug: string;
		title: string;
	}>;
	featuredImage: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'mainImage';
	};
	publishedAt: string;
	slug: string;
	title: string;
} | null;

// Source: ./src/lib/sanity/queries/pages/news-overview-category.ts
// Variable: newsOverviewCategoryPageQuery
// Query: *[_type == 'newsOverviewCategory'][0] {		...,		content {			contactPersonsSection {				intro,				subtitle,				title,			}		}	}
export type NewsOverviewCategoryPageQueryResult = {
	_id: string;
	_type: 'newsOverviewCategory';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		contactPersonsSection: {
			intro: string | null;
			subtitle: string;
			title: string;
		};
	};
} | null;
// Variable: newsOverviewContactPersonsCategoryQuery
// Query: *[_type == 'newsOverviewCategory'][0].content.contactPersonsSection.contactPersons[]-> {			firstName,	lastName,	phone,	image,	"email": affiliations[department->title == $department][0].role->email,	"role": affiliations[department->title == $department][0].role->title,	"vision": affiliations[department->title == $department][0].taskDescription,	}
export type NewsOverviewContactPersonsCategoryQueryResult = Array<{
	firstName: string;
	lastName: string;
	phone: string | null;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	email: string | null;
	role: string | null;
	vision: string | null;
}> | null;
// Variable: newsArticlesPaginatedForCategoryQuery
// Query: *[_type == 'news.article' && $category in categories[]->slug.current]	| order(publishedAt desc) [$start..$end] {			_id,	publishedAt,	author->{ firstName, lastName, image },	categories[]->{ title, "slug": slug.current },	excerpt,	featuredImage,	"slug": slug.current,	title,	}
export type NewsArticlesPaginatedForCategoryQueryResult = Array<{
	_id: string;
	publishedAt: string;
	author: {
		firstName: string;
		lastName: string;
		image: {
			asset?: {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string;
			description?: string;
			_type: 'extendedImage';
		};
	};
	categories: Array<{
		title: string;
		slug: string;
	}>;
	excerpt: string;
	featuredImage: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'mainImage';
	};
	slug: string;
	title: string;
}>;
// Variable: newsArticlesTotalForCategoryQuery
// Query: count(*[_type == "news.article" && $category in categories[]->slug.current])
export type NewsArticlesTotalForCategoryQueryResult = number;

// Source: ./src/lib/sanity/queries/pages/news-overview.ts
// Variable: newsOverviewPageQuery
// Query: *[_type == 'newsOverview'][0] {		...,		content {			contactPersonsSection {				intro,				subtitle,				title,			}		}	}
export type NewsOverviewPageQueryResult = {
	_id: string;
	_type: 'newsOverview';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	slug?: Slug;
	title: string;
	subtitle: string;
	intro?: string;
	meta?: MetaFields;
	content: {
		contactPersonsSection: {
			intro: string | null;
			subtitle: string;
			title: string;
		};
	};
} | null;
// Variable: newsOverviewContactPersonsQuery
// Query: *[_type == 'newsOverview'][0].content.contactPersonsSection.contactPersons[]-> {			firstName,	lastName,	phone,	image,	"email": affiliations[department->title == $department][0].role->email,	"role": affiliations[department->title == $department][0].role->title,	"vision": affiliations[department->title == $department][0].taskDescription,	}
export type NewsOverviewContactPersonsQueryResult = Array<{
	firstName: string;
	lastName: string;
	phone: string | null;
	image: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'extendedImage';
	};
	email: string | null;
	role: string | null;
	vision: string | null;
}> | null;

// Source: ./src/lib/sanity/queries/shared/news.ts
// Variable: newsArticlesQuery
// Query: *[_type == 'news.article'] | order(publishedAt desc) [0..2] {			_id,	publishedAt,	author->{ firstName, lastName, image },	categories[]->{ title, "slug": slug.current },	excerpt,	featuredImage,	"slug": slug.current,	title,	}
export type NewsArticlesQueryResult = Array<{
	_id: string;
	publishedAt: string;
	author: {
		firstName: string;
		lastName: string;
		image: {
			asset?: {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string;
			description?: string;
			_type: 'extendedImage';
		};
	};
	categories: Array<{
		title: string;
		slug: string;
	}>;
	excerpt: string;
	featuredImage: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'mainImage';
	};
	slug: string;
	title: string;
}>;
// Variable: newsArticlesPaginatedQuery
// Query: *[_type == 'news.article'] | order(publishedAt desc) [$start..$end] { // $start = 3, $end = 8			_id,	publishedAt,	author->{ firstName, lastName, image },	categories[]->{ title, "slug": slug.current },	excerpt,	featuredImage,	"slug": slug.current,	title,	}
export type NewsArticlesPaginatedQueryResult = Array<{
	_id: string;
	publishedAt: string;
	author: {
		firstName: string;
		lastName: string;
		image: {
			asset?: {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
			};
			media?: unknown;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string;
			description?: string;
			_type: 'extendedImage';
		};
	};
	categories: Array<{
		title: string;
		slug: string;
	}>;
	excerpt: string;
	featuredImage: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string;
		description?: string;
		_type: 'mainImage';
	};
	slug: string;
	title: string;
}>;
// Variable: newsArticlesTotalQuery
// Query: count(*[_type == "news.article"])
export type NewsArticlesTotalQueryResult = number;
// Variable: newsCategoryQuery
// Query: *[_type == 'news.category' && slug.current == $slug][0] {		"slug": slug.current,		title	}
export type NewsCategoryQueryResult = {
	slug: string;
	title: string;
} | null;

// Source: ./src/lib/sanity/queries/shared/social-media.ts
// Variable: socialMediaQuery
// Query: *[_type == 'site-settings'][0].socialFields
export type SocialMediaQueryResult = SocialFields | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
	interface SanityQueries {
		"\n\t*[_type == 'contact'][0] {\n\t\t...,\n\t\tcontent {\n\t\t\t...,\n\t\t\tcontactPersonsSection {\n\t\t\t\tintro,\n\t\t\t\tsubtitle,\n\t\t\t\ttitle,\n\t\t\t}\n\t\t}\n\t}\n": ContactPageQueryResult;
		'\n\t*[_type == \'contact\'][0].content.contactPersonsSection.contactPersons[]-> {\n\t\t\n\tfirstName,\n\tlastName,\n\tphone,\n\timage,\n\t"email": affiliations[department->title == $department][0].role->email,\n\t"role": affiliations[department->title == $department][0].role->title,\n\t"vision": affiliations[department->title == $department][0].taskDescription,\n\n\t}\n': ContactPageContactPersonsQueryResult;
		"\n\t*[_type == 'home'][0] {\n\t\t...,\n\t\tcontent {\n\t\t\t...,\n\t\t\tcontactPersonsSection {\n\t\t\t\tintro,\n\t\t\t\tsubtitle,\n\t\t\t\ttitle,\n\t\t\t}\n\t\t}\n\t}\n": HomePageQueryResult;
		"\n\t*[_type == 'group'][] {\n\t\ttitle,\n\t\ticon,\n\t}\n": HomePageGroupsQueryResult;
		"\n\t*[_type == 'home'][0].content.testimonialSection.testimonials[0..2]-> {\n\t\tfirstName,\n\t\tlastName,\n\t\timage,\n\t\tquote,\n\t\trole,\n\t\tshow,\n\t}\n": HomePageTestimonialsQueryResult;
		'\n\t*[_type == \'home\'][0].content.contactPersonsSection.contactPersons[]-> {\n\t\t\n\tfirstName,\n\tlastName,\n\tphone,\n\timage,\n\t"email": affiliations[department->title == $department][0].role->email,\n\t"role": affiliations[department->title == $department][0].role->title,\n\t"vision": affiliations[department->title == $department][0].taskDescription,\n\n\t}\n': HomePageContactPersonsQueryResult;
		"\n\t*[_type == 'news-article-page'][0] {\n\t\ttitle,\n\t\tsubtitle,\n\t}\n": NewsArticleHeroQueryResult;
		'\n\t*[_type == \'news.article\' && slug.current == $slug][0] {\n\t\tauthor -> {\n\t\t\temail,\n\t\t\tfirstName,\n\t\t\timage,\n\t\t\tlastName,\n\t\t\tjobTitle,\n\t\t},\n\t\tbody[],\n\t\tcategories[] -> {\n\t\t\t"slug": slug.current,\n\t\t\ttitle\n\t\t},\n\t\tfeaturedImage,\n\t\tpublishedAt,\n\t\t"slug": slug.current,\n\t\ttitle,\n\t}\n': NewsArticleContentQueryResult;
		"\n\t*[_type == 'newsOverviewCategory'][0] {\n\t\t...,\n\t\tcontent {\n\t\t\tcontactPersonsSection {\n\t\t\t\tintro,\n\t\t\t\tsubtitle,\n\t\t\t\ttitle,\n\t\t\t}\n\t\t}\n\t}\n": NewsOverviewCategoryPageQueryResult;
		'\n\t*[_type == \'newsOverviewCategory\'][0].content.contactPersonsSection.contactPersons[]-> {\n\t\t\n\tfirstName,\n\tlastName,\n\tphone,\n\timage,\n\t"email": affiliations[department->title == $department][0].role->email,\n\t"role": affiliations[department->title == $department][0].role->title,\n\t"vision": affiliations[department->title == $department][0].taskDescription,\n\n\t}\n': NewsOverviewContactPersonsCategoryQueryResult;
		'\n\t*[_type == \'news.article\' && $category in categories[]->slug.current]\n\t| order(publishedAt desc) [$start..$end] {\n\t\t\n\t_id,\n\tpublishedAt,\n\tauthor->{ firstName, lastName, image },\n\tcategories[]->{ title, "slug": slug.current },\n\texcerpt,\n\tfeaturedImage,\n\t"slug": slug.current,\n\ttitle,\n\n\t}\n': NewsArticlesPaginatedForCategoryQueryResult;
		'\n\tcount(*[_type == "news.article" && $category in categories[]->slug.current])\n': NewsArticlesTotalForCategoryQueryResult;
		"\n\t*[_type == 'newsOverview'][0] {\n\t\t...,\n\t\tcontent {\n\t\t\tcontactPersonsSection {\n\t\t\t\tintro,\n\t\t\t\tsubtitle,\n\t\t\t\ttitle,\n\t\t\t}\n\t\t}\n\t}\n": NewsOverviewPageQueryResult;
		'\n\t*[_type == \'newsOverview\'][0].content.contactPersonsSection.contactPersons[]-> {\n\t\t\n\tfirstName,\n\tlastName,\n\tphone,\n\timage,\n\t"email": affiliations[department->title == $department][0].role->email,\n\t"role": affiliations[department->title == $department][0].role->title,\n\t"vision": affiliations[department->title == $department][0].taskDescription,\n\n\t}\n': NewsOverviewContactPersonsQueryResult;
		'\n\t*[_type == \'news.article\'] | order(publishedAt desc) [0..2] {\n\t\t\n\t_id,\n\tpublishedAt,\n\tauthor->{ firstName, lastName, image },\n\tcategories[]->{ title, "slug": slug.current },\n\texcerpt,\n\tfeaturedImage,\n\t"slug": slug.current,\n\ttitle,\n\n\t}\n': NewsArticlesQueryResult;
		'\n\t*[_type == \'news.article\'] | order(publishedAt desc) [$start..$end] { // $start = 3, $end = 8\n\t\t\n\t_id,\n\tpublishedAt,\n\tauthor->{ firstName, lastName, image },\n\tcategories[]->{ title, "slug": slug.current },\n\texcerpt,\n\tfeaturedImage,\n\t"slug": slug.current,\n\ttitle,\n\n\t}\n': NewsArticlesPaginatedQueryResult;
		'count(*[_type == "news.article"])': NewsArticlesTotalQueryResult;
		'\n\t*[_type == \'news.category\' && slug.current == $slug][0] {\n\t\t"slug": slug.current,\n\t\ttitle\n\t}\n': NewsCategoryQueryResult;
		"*[_type == 'site-settings'][0].socialFields": SocialMediaQueryResult;
	}
}
