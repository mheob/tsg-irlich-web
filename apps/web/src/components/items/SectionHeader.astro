---
import { isHTML } from '@/utils/content';

interface Props {
	descriptionClass?: string;
	isCentered?: boolean;
	level?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | undefined;
	subTitle?: string | undefined;
	title: string;
}

const { descriptionClass, isCentered = false, level = 'h2', subTitle, title } = Astro.props;

const HeadingTag = level as keyof HTMLHeadingElement;

const slotContent = await Astro.slots.render('default');
const isHTMLContent = isHTML(slotContent);
---

<header class:list={[{ 'text-center': isCentered }]}>
	{subTitle && <div class:list={[{ 'mx-auto': isCentered }, 'sub-title']}>{subTitle}</div>}

	<HeadingTag class="title">{title}</HeadingTag>

	{
		isHTMLContent ? (
			<slot />
		) : (
			<p
				class:list={[
					{ 'mx-auto': isCentered },
					{ 'pr-16': !isCentered },
					'mt-6 max-w-3xl text-xl',
					descriptionClass,
				]}
			>
				<slot />
			</p>
		)
	}
</header>

<style>
	.sub-title {
		@apply relative w-fit px-16 text-xl uppercase;
	}

	.sub-title::before,
	.sub-title::after {
		content: '';
		top: calc(50% - 2px);
		@apply absolute w-12 border;
	}

	.sub-title::before {
		left: 0;
	}

	.sub-title::after {
		right: 0;
	}

	.title {
		@apply mt-4 text-7xl;
	}
</style>
