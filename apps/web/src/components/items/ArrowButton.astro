---
import type { ComponentProps } from 'astro/types';
import {
	ArrowDown,
	ArrowDownLeft,
	ArrowDownRight,
	ArrowLeft,
	ArrowRight,
	ArrowUp,
	ArrowUpLeft,
	ArrowUpRight,
} from 'lucide-astro';

type Props = {
	class?: string;
	direction?:
		| 'down'
		| 'down-left'
		| 'down-right'
		| 'left'
		| 'right'
		| 'up'
		| 'up-left'
		| 'up-right';
	size?: string;
	variant?: 'ghost' | 'primary' | 'secondary';
} & (
	| {
			anchorProps?: HTMLAnchorElement;
			buttonProps?: never;
			buttonType?: never;
			href?: string;
			tag?: 'a';
	  }
	| {
			anchorProps?: never;
			buttonProps?: HTMLButtonElement;
			buttonType?: 'button' | 'reset' | 'submit';
			href?: never;
			tag?: 'button';
	  }
);

const {
	anchorProps,
	buttonProps,
	buttonType = 'button',
	class: className,
	direction = 'right',
	href,
	size = '48',
	tag = 'button',
	variant = 'ghost',
} = Astro.props;

const Tag = tag as any;

const iconProps: ComponentProps<typeof ArrowDown> = {
	class: `${variant === 'primary' ? 'text-white' : variant === 'secondary' ? 'text-brand' : 'text-black'} bg-transparent`,
	size,
	strokeWidth: 2,
};
---

<Tag
	class:list={[
		{ 'hover:bg-gray-lightest/95 border bg-white': variant === 'ghost' },
		{ 'bg-brand hover:bg-brand/80 border-brand': variant === 'primary' },
		{
			'bg-brand-secondary hover:bg-brand-secondary/80 border-brand-secondary':
				variant === 'secondary',
		},
		'rounded-full p-1.5',
		className,
	]}
	{...tag === 'button' ? { type: buttonType } : { href }}
	{...tag === 'button' ? { ...buttonProps } : { ...anchorProps }}
>
	{direction === 'down' && <ArrowDown {...iconProps} />}
	{direction === 'down-left' && <ArrowDownLeft {...iconProps} />}
	{direction === 'down-right' && <ArrowDownRight {...iconProps} />}
	{direction === 'left' && <ArrowLeft {...iconProps} />}
	{direction === 'right' && <ArrowRight {...iconProps} />}
	{direction === 'up' && <ArrowUp {...iconProps} />}
	{direction === 'up-left' && <ArrowUpLeft {...iconProps} />}
	{direction === 'up-right' && <ArrowUpRight {...iconProps} />}
</Tag>
